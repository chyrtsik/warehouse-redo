/*
 * Copyright (c) 2007-2013 Artigile.
 * Software development company.
 * All Rights Reserved.
 *
 * This software is the confidential and proprietary information of Artigile. ("Confidential Information").
 * You shall not disclose such Confidential Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with Artigile software company.
 */

package com.artigile.warehouse.gui.menuitems.details.batches;

import com.artigile.warehouse.bl.detail.DetailBatchService;
import com.artigile.warehouse.domain.admin.PermissionType;
import com.artigile.warehouse.gui.core.properties.PropertiesForm;
import com.artigile.warehouse.gui.core.properties.data.exchange.DataExchange;
import com.artigile.warehouse.gui.core.properties.data.filtering.DataFiltering;
import com.artigile.warehouse.gui.core.properties.data.init.ComboBoxFillOptions;
import com.artigile.warehouse.gui.core.properties.data.init.InitUtils;
import com.artigile.warehouse.gui.core.properties.data.validation.DataValidation;
import com.artigile.warehouse.gui.core.properties.data.validation.DataValidationException;
import com.artigile.warehouse.gui.core.properties.dialogs.Dialogs;
import com.artigile.warehouse.gui.core.properties.dialogs.MessageDialogs;
import com.artigile.warehouse.gui.core.properties.dialogs.barcode.BarCodeListener;
import com.artigile.warehouse.gui.core.properties.dialogs.browser.BrowseResult;
import com.artigile.warehouse.gui.core.report.command.availability.PermissionCommandAvailability;
import com.artigile.warehouse.gui.menuitems.details.models.DetailModelForm;
import com.artigile.warehouse.gui.menuitems.details.models.DetailModelsList;
import com.artigile.warehouse.gui.menuitems.marketProposals.MarketProposalsForm;
import com.artigile.warehouse.utils.ModelFieldsLengths;
import com.artigile.warehouse.utils.SpringServiceContext;
import com.artigile.warehouse.utils.StringUtils;
import com.artigile.warehouse.utils.dto.CurrencyTO;
import com.artigile.warehouse.utils.dto.ManufacturerTO;
import com.artigile.warehouse.utils.dto.MeasureUnitTO;
import com.artigile.warehouse.utils.dto.details.DetailBatchTO;
import com.artigile.warehouse.utils.dto.details.DetailModelTO;
import com.artigile.warehouse.utils.i18n.I18nSupport;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.List;
import java.util.ResourceBundle;

/**
 * @author Shyrik, 26.12.2008
 */
public class DetailBatchForm implements PropertiesForm {
    private JTextField batchName;
    private JTextField batchAcceptance;
    private JTextField batchYear;
    private JComboBox batchManufacturer;
    private JTextField batchBuyPrice;
    private JTextField batchSellPrice;
    private JComboBox batchCurrency;
    private JTextField batchSellPrice2;
    private JComboBox batchCurrency2;
    private JTextField batchCount;
    private JTextField batchReservedCount;
    private JComboBox batchCountMeas;
    private JTextArea batchNotice;
    private JTextField batchModel;
    private JPanel contentPanel;
    private JTextField batchMisc;
    private JTextField batchType;
    private JButton createModel;
    private JButton modelProperties;
    private JButton createModelAsCopy;
    private JButton browseModels;
    private JTextField batchBarCode;
    private JTextField batchNomenclatureArticle;
    private JButton btnContractorsProposals;
    private JButton bntScanBarCode;
    private JLabel batchAcceptanceLabel;
    private JLabel batchYearLabel;
    private JButton btnGenerateBarCode;

    private List<ManufacturerTO> manufacturers;

    private DetailModelTO selectedModel;

    private DetailBatchTO detailBatch;
    private DetailBatchTO tempDetailBatch; //Temp detail batch for recalculation name.
    private boolean canEdit;
    private PropertiesType propertiesType;

    /**
     * Permission for edit sale price of item
     */
    PermissionCommandAvailability permissionAvailability = new PermissionCommandAvailability(PermissionType.EDIT_DETAIL_BATCH_SALE_PRICE);

    /**
     * Listener processing bar code scanning events.
     */
    private BarCodeListener barCodeListener;

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPanel = new JPanel();
        contentPanel.setLayout(new GridLayoutManager(14, 4, new Insets(0, 0, 0, 0), -1, -1));
        final JLabel label1 = new JLabel();
        this.$$$loadLabelText$$$(label1, ResourceBundle.getBundle("i18n/warehouse").getString("detail.batches.properties.model"));
        contentPanel.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label2 = new JLabel();
        this.$$$loadLabelText$$$(label2, ResourceBundle.getBundle("i18n/warehouse").getString("detail.batches.properties.name"));
        contentPanel.add(label2, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        batchAcceptanceLabel = new JLabel();
        this.$$$loadLabelText$$$(batchAcceptanceLabel, ResourceBundle.getBundle("i18n/warehouse").getString("detail.batches.properties.acceptance"));
        contentPanel.add(batchAcceptanceLabel, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label3 = new JLabel();
        this.$$$loadLabelText$$$(label3, ResourceBundle.getBundle("i18n/warehouse").getString("detail.batches.properties.manufacturer"));
        contentPanel.add(label3, new GridConstraints(7, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label4 = new JLabel();
        this.$$$loadLabelText$$$(label4, ResourceBundle.getBundle("i18n/warehouse").getString("detail.batches.properties.buyPrice"));
        contentPanel.add(label4, new GridConstraints(8, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label5 = new JLabel();
        this.$$$loadLabelText$$$(label5, ResourceBundle.getBundle("i18n/warehouse").getString("detail.batches.properties.sellPrice"));
        contentPanel.add(label5, new GridConstraints(9, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label6 = new JLabel();
        this.$$$loadLabelText$$$(label6, ResourceBundle.getBundle("i18n/warehouse").getString("detail.batches.properties.countMeas"));
        contentPanel.add(label6, new GridConstraints(12, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label7 = new JLabel();
        this.$$$loadLabelText$$$(label7, ResourceBundle.getBundle("i18n/warehouse").getString("detail.batches.properties.notice"));
        contentPanel.add(label7, new GridConstraints(13, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        batchName = new JTextField();
        batchName.setEditable(false);
        contentPanel.add(batchName, new GridConstraints(1, 1, 1, 3, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        batchAcceptance = new JTextField();
        contentPanel.add(batchAcceptance, new GridConstraints(4, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        batchManufacturer = new JComboBox();
        contentPanel.add(batchManufacturer, new GridConstraints(7, 1, 1, 3, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        batchBuyPrice = new JTextField();
        batchBuyPrice.setEditable(false);
        contentPanel.add(batchBuyPrice, new GridConstraints(8, 1, 1, 3, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        contentPanel.add(scrollPane1, new GridConstraints(13, 1, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, new Dimension(300, 50), null, null, 0, false));
        batchNotice = new JTextArea();
        scrollPane1.setViewportView(batchNotice);
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 5, new Insets(0, 0, 0, 0), -1, -1));
        contentPanel.add(panel1, new GridConstraints(0, 1, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        batchModel = new JTextField();
        batchModel.setEditable(false);
        panel1.add(batchModel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, new Dimension(150, -1), new Dimension(150, -1), null, 0, false));
        browseModels = new JButton();
        browseModels.setIcon(new ImageIcon(getClass().getResource("/images/find.png")));
        browseModels.setText("");
        browseModels.setToolTipText(ResourceBundle.getBundle("i18n/warehouse").getString("detail.batches.properties.browseModelPropertiesToolTip"));
        panel1.add(browseModels, new GridConstraints(0, 4, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        modelProperties = new JButton();
        modelProperties.setIcon(new ImageIcon(getClass().getResource("/images/properties.png")));
        modelProperties.setText("");
        modelProperties.setToolTipText(ResourceBundle.getBundle("i18n/warehouse").getString("detail.batches.properties.modelPropertiesToolTip"));
        panel1.add(modelProperties, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        createModelAsCopy = new JButton();
        createModelAsCopy.setIcon(new ImageIcon(getClass().getResource("/images/copy.png")));
        createModelAsCopy.setText("");
        createModelAsCopy.setToolTipText(ResourceBundle.getBundle("i18n/warehouse").getString("detail.batches.properties.createModelAsCopyToolTip"));
        panel1.add(createModelAsCopy, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        createModel = new JButton();
        createModel.setIcon(new ImageIcon(getClass().getResource("/images/create.png")));
        createModel.setText("");
        createModel.setToolTipText(ResourceBundle.getBundle("i18n/warehouse").getString("detail.batches.properties.createModelToolTip"));
        panel1.add(createModel, new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label8 = new JLabel();
        this.$$$loadLabelText$$$(label8, ResourceBundle.getBundle("i18n/warehouse").getString("detail.batches.properties.misc"));
        contentPanel.add(label8, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label9 = new JLabel();
        this.$$$loadLabelText$$$(label9, ResourceBundle.getBundle("i18n/warehouse").getString("detail.batches.properties.type"));
        contentPanel.add(label9, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        batchMisc = new JTextField();
        batchMisc.setEditable(false);
        contentPanel.add(batchMisc, new GridConstraints(2, 1, 1, 3, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        batchType = new JTextField();
        batchType.setEditable(false);
        contentPanel.add(batchType, new GridConstraints(3, 1, 1, 3, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        batchCountMeas = new JComboBox();
        contentPanel.add(batchCountMeas, new GridConstraints(12, 1, 1, 3, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label10 = new JLabel();
        this.$$$loadLabelText$$$(label10, ResourceBundle.getBundle("i18n/warehouse").getString("detail.batches.properties.availCount"));
        contentPanel.add(label10, new GridConstraints(11, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label11 = new JLabel();
        this.$$$loadLabelText$$$(label11, ResourceBundle.getBundle("i18n/warehouse").getString("detail.batches.properties.barCode"));
        contentPanel.add(label11, new GridConstraints(6, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        contentPanel.add(panel2, new GridConstraints(9, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        batchSellPrice = new JTextField();
        batchSellPrice.setText("");
        panel2.add(batchSellPrice, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(120, -1), null, 0, false));
        btnContractorsProposals = new JButton();
        this.$$$loadButtonText$$$(btnContractorsProposals, ResourceBundle.getBundle("i18n/warehouse").getString("detail.batches.properties.button.prices"));
        panel2.add(btnContractorsProposals, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        batchYearLabel = new JLabel();
        this.$$$loadLabelText$$$(batchYearLabel, ResourceBundle.getBundle("i18n/warehouse").getString("detail.batches.properties.year"));
        contentPanel.add(batchYearLabel, new GridConstraints(4, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        batchYear = new JTextField();
        contentPanel.add(batchYear, new GridConstraints(4, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JLabel label12 = new JLabel();
        this.$$$loadLabelText$$$(label12, ResourceBundle.getBundle("i18n/warehouse").getString("detail.batches.properties.currency"));
        contentPanel.add(label12, new GridConstraints(9, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        batchCurrency = new JComboBox();
        contentPanel.add(batchCurrency, new GridConstraints(9, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label13 = new JLabel();
        this.$$$loadLabelText$$$(label13, ResourceBundle.getBundle("i18n/warehouse").getString("detail.batches.properties.reservedCount"));
        contentPanel.add(label13, new GridConstraints(11, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        batchReservedCount = new JTextField();
        batchReservedCount.setEditable(false);
        contentPanel.add(batchReservedCount, new GridConstraints(11, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(70, -1), null, 0, false));
        batchCount = new JTextField();
        batchCount.setEditable(false);
        contentPanel.add(batchCount, new GridConstraints(11, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(70, -1), null, 0, false));
        final JLabel label14 = new JLabel();
        this.$$$loadLabelText$$$(label14, ResourceBundle.getBundle("i18n/warehouse").getString("detail.batches.properties.sellPrice2"));
        contentPanel.add(label14, new GridConstraints(10, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        batchSellPrice2 = new JTextField();
        batchSellPrice2.setText("");
        contentPanel.add(batchSellPrice2, new GridConstraints(10, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(120, -1), null, 0, false));
        final JLabel label15 = new JLabel();
        this.$$$loadLabelText$$$(label15, ResourceBundle.getBundle("i18n/warehouse").getString("detail.batches.properties.currency2"));
        contentPanel.add(label15, new GridConstraints(10, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        batchCurrency2 = new JComboBox();
        contentPanel.add(batchCurrency2, new GridConstraints(10, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label16 = new JLabel();
        this.$$$loadLabelText$$$(label16, ResourceBundle.getBundle("i18n/warehouse").getString("detail.batches.properties.nomenclatureArticle"));
        contentPanel.add(label16, new GridConstraints(5, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        batchNomenclatureArticle = new JTextField();
        contentPanel.add(batchNomenclatureArticle, new GridConstraints(5, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        batchBarCode = new JTextField();
        batchBarCode.setEditable(false);
        contentPanel.add(batchBarCode, new GridConstraints(6, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new GridLayoutManager(1, 3, new Insets(0, 0, 0, 0), -1, -1));
        contentPanel.add(panel3, new GridConstraints(6, 2, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        bntScanBarCode = new JButton();
        this.$$$loadButtonText$$$(bntScanBarCode, ResourceBundle.getBundle("i18n/warehouse").getString("detail.batches.properties.button.scan.barcode"));
        panel3.add(bntScanBarCode, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        panel3.add(spacer1, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        btnGenerateBarCode = new JButton();
        this.$$$loadButtonText$$$(btnGenerateBarCode, ResourceBundle.getBundle("i18n/warehouse").getString("detail.batches.properties.button.generate.barcode"));
        panel3.add(btnGenerateBarCode, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private void $$$loadLabelText$$$(JLabel component, String text) {
        StringBuffer result = new StringBuffer();
        boolean haveMnemonic = false;
        char mnemonic = '\0';
        int mnemonicIndex = -1;
        for (int i = 0; i < text.length(); i++) {
            if (text.charAt(i) == '&') {
                i++;
                if (i == text.length()) break;
                if (!haveMnemonic && text.charAt(i) != '&') {
                    haveMnemonic = true;
                    mnemonic = text.charAt(i);
                    mnemonicIndex = result.length();
                }
            }
            result.append(text.charAt(i));
        }
        component.setText(result.toString());
        if (haveMnemonic) {
            component.setDisplayedMnemonic(mnemonic);
            component.setDisplayedMnemonicIndex(mnemonicIndex);
        }
    }

    /**
     * @noinspection ALL
     */
    private void $$$loadButtonText$$$(AbstractButton component, String text) {
        StringBuffer result = new StringBuffer();
        boolean haveMnemonic = false;
        char mnemonic = '\0';
        int mnemonicIndex = -1;
        for (int i = 0; i < text.length(); i++) {
            if (text.charAt(i) == '&') {
                i++;
                if (i == text.length()) break;
                if (!haveMnemonic && text.charAt(i) != '&') {
                    haveMnemonic = true;
                    mnemonic = text.charAt(i);
                    mnemonicIndex = result.length();
                }
            }
            result.append(text.charAt(i));
        }
        component.setText(result.toString());
        if (haveMnemonic) {
            component.setMnemonic(mnemonic);
            component.setDisplayedMnemonicIndex(mnemonicIndex);
        }
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPanel;
    }

    public enum PropertiesType {
        CreateNew,  //Properties for creating new detail batch.
        CreateAsCopy, //Properties for copying detail batch.
        Properties, //Properties of existing detail batch.
    }

    public DetailBatchForm(DetailBatchTO detailBatch, boolean canEdit, PropertiesType propertiesType) {
        $$$setupUI$$$();

        this.detailBatch = detailBatch;
        this.canEdit = canEdit;
        this.propertiesType = propertiesType;

        this.tempDetailBatch = new DetailBatchTO();
        this.tempDetailBatch.copyFrom(detailBatch);

        if (!permissionAvailability.isAvailable(null)) batchSellPrice.setEditable(false);

        //Hiding not used fields. Will be deleted later.
        batchAcceptanceLabel.setVisible(false);
        batchAcceptance.setVisible(false);
        batchYearLabel.setVisible(false);
        batchYear.setVisible(false);

        // Limitation of text length in the fields
        DataFiltering.setTextLengthLimit(batchAcceptance, ModelFieldsLengths.DEFAULT_MAX_TEXT_LENGTH);
        DataFiltering.setTextLengthLimit(batchYear, ModelFieldsLengths.MAX_TEXT_LENGTH_YEAR);
        DataFiltering.setTextLengthLimit(batchSellPrice, ModelFieldsLengths.MAX_LENGTH_DOUBLE_PRECISION);
        DataFiltering.setTextLengthLimit(batchSellPrice2, ModelFieldsLengths.MAX_LENGTH_DOUBLE_PRECISION);
        DataFiltering.setTextLengthLimit(batchNotice, ModelFieldsLengths.DEFAULT_MAX_TEXT_LENGTH);
        DataFiltering.setTextLengthLimit(batchBarCode, ModelFieldsLengths.MAX_BAR_CODE_LENGTH);
        DataFiltering.setTextLengthLimit(batchNomenclatureArticle, ModelFieldsLengths.MAX_TEXT_LENGTH_NOMENCLATURE_ARTICLE);

        InitUtils.initManufacturersCombo(batchManufacturer, new ComboBoxFillOptions().setAddNotSelectedItem(true));
        InitUtils.initCurrenciesCombo(batchCurrency, null);
        InitUtils.initCurrenciesCombo(batchCurrency2, new ComboBoxFillOptions().setAddNotSelectedItem(true));
        InitUtils.initMeasuresCombo(batchCountMeas, null);

        initListeners();
        initButtons();
    }

    @Override
    public String getTitle() {
        if (propertiesType == PropertiesType.CreateNew) {
            return I18nSupport.message("detail.batches.properties.title.createNew");
        } else if (propertiesType == PropertiesType.CreateAsCopy) {
            return I18nSupport.message("detail.batches.properties.title.createAsCopy");
        } else if (propertiesType == PropertiesType.Properties) {
            return I18nSupport.message("detail.batches.properties.title.properties");
        } else {
            throw new RuntimeException("DetailBatchForm.getTitle: Not supported properties type.");
        }
    }

    @Override
    public JPanel getContentPanel() {
        return contentPanel;
    }

    @Override
    public boolean canSaveData() {
        return canEdit;
    }

    @Override
    public void loadData() {
        batchAcceptance.setText(detailBatch.getAcceptance());
        batchYear.setText(detailBatch.getYear() == null ? "" : detailBatch.getYear().toString());
        batchBarCode.setText(detailBatch.getBarCode() == null ? "" : detailBatch.getBarCode());
        batchNomenclatureArticle.setText(detailBatch.getNomenclatureArticle() == null ? "" : detailBatch.getNomenclatureArticle());
        DataExchange.selectComboItem(batchManufacturer, detailBatch.getManufacturer());

        batchBuyPrice.setText(StringUtils.formatNumber(detailBatch.getBuyPrice()));
        batchSellPrice.setText(StringUtils.formatNumber(detailBatch.getSellPrice()));
        DataExchange.selectComboItemLeaveDefault(batchCurrency, detailBatch.getCurrency());

        batchSellPrice2.setText(StringUtils.formatNumber(detailBatch.getSellPrice2()));
        DataExchange.selectComboItem(batchCurrency2, detailBatch.getCurrency2());

        batchCount.setText(String.valueOf(detailBatch.getAvailCount()));
        if (detailBatch.getNeedRecalculate()) {
            batchCount.setForeground(Color.RED);
        }
        batchReservedCount.setText(String.valueOf(detailBatch.getReservedCount()));
        DataExchange.selectComboItemLeaveDefault(batchCountMeas, detailBatch.getCountMeas());

        batchNotice.setText(detailBatch.getNotice());

        selectedModel = detailBatch.getModel();
        refreshModel();
    }

    @Override
    public void validateData() throws DataValidationException {
        if (batchModel.getText().isEmpty()) {
            DataValidation.fail(batchModel, I18nSupport.message("detail.batches.error.batchModelIsNotPreset"));
        }
        DataValidation.checkNotEmpty(batchName);
        DataValidation.checkIsNumberOrIsEmpty(batchYear.getText(), batchYear);
        DataValidation.checkIsNumberOrIsEmpty(batchBuyPrice.getText(), batchBuyPrice);
        DataValidation.checkIsNumberOrIsEmpty(batchSellPrice.getText(), batchSellPrice);
        DataValidation.checkSelected(batchCurrency);

        DataValidation.checkIsNumberOrIsEmpty(batchSellPrice2.getText(), batchSellPrice2);
        if (!batchSellPrice2.getText().isEmpty()) {
            CurrencyTO selectedCurrency2 = (CurrencyTO) DataExchange.getComboSelection(batchCurrency2);
            DataValidation.checkNotNull(selectedCurrency2, batchCurrency2, "validation.select.value");
        }

        DataValidation.checkSelected(batchCountMeas);

        doSaveData(tempDetailBatch);
        if (!getDetailBatchesService().isUniqueDetailBatch(tempDetailBatch)) {
            DataValidation.failRes("detail.batches.error.batchIsNotUnique");
        } else if (!getDetailBatchesService().isUniqueDetailBatchByBarCode(tempDetailBatch)) {
            if (!batchBarCode.getText().isEmpty()) {
                DataValidation.failRes(batchBarCode, "detail.batches.error.barCodeIsNotUnique");
            }
        } else if (!getDetailBatchesService().isUniqueDetailBatchByNomenclatureArticle(tempDetailBatch)) {
            if (!batchNomenclatureArticle.getText().isEmpty()) {
                DataValidation.failRes(batchNomenclatureArticle, "detail.batches.error.nomenclatureArticleIsNotUnique");
            }
        }
    }

    private DetailBatchService getDetailBatchesService() {
        return SpringServiceContext.getInstance().getDetailBatchesService();
    }

    @Override
    public void saveData() {
        doSaveData(detailBatch);
    }

    //================================ User input processing and helpers =============================

    private void onBrowseModels() {
        //Show browser for choosing detail model.
        BrowseResult result = Dialogs.runBrowser(new DetailModelsList());
        if (result.isOk()) {
            selectedModel = (DetailModelTO) result.getSelectedItems().get(0);
            refreshModel();
        }
    }

    private void onCreateModell() {
        //Show properties dialog for new detail model.
        DetailModelTO detailModel = new DetailModelTO();
        PropertiesForm prop = new DetailModelForm(detailModel, getCanEditModel(), DetailModelForm.PropertiesType.CreateNewForBatch);
        if (Dialogs.runProperties(prop)) {
            //Saving new detail model.
            SpringServiceContext.getInstance().getDetailModelsService().saveDetailModel(detailModel);
            selectedModel = detailModel;
            refreshModel();
        }
    }

    private boolean getCanEditModel() {
        return new PermissionCommandAvailability(PermissionType.EDIT_DETAIL_MODELS_LIST).isAvailable(null);
    }

    private boolean modelAsCopyCreated = false;

    private void onCreateModelAsCopy() {
        //Creating a copy of selected detail model.
        DetailModelTO detailModel = new DetailModelTO();
        detailModel.copyFrom(selectedModel);
        detailModel.setId(0);

        if (Dialogs.runProperties(new DetailModelForm(detailModel, getCanEditModel(), DetailModelForm.PropertiesType.CreateAsCopyForBatch))) {
            //Saving new detail model.
            SpringServiceContext.getInstance().getDetailModelsService().saveDetailModel(detailModel);
            selectedModel = detailModel;
            modelAsCopyCreated = true;
            refreshModel();
        }
    }

    private void onModelProperties() {
        //Showing properties of selected detailModel.
        boolean asCopy = propertiesType.equals(PropertiesType.CreateAsCopy);
        boolean canEditModel = getCanEditModel() && (!asCopy || modelAsCopyCreated);
        if (Dialogs.runProperties(new DetailModelForm(selectedModel, canEditModel, DetailModelForm.PropertiesType.Properties))) {
            //Saving changes in detail model.
            SpringServiceContext.getInstance().getDetailModelsService().saveDetailModel(selectedModel);
        }
        refreshModel();
    }

    private void refreshModel() {
        batchModel.setText(selectedModel == null ? "" : selectedModel.getName());
        modelProperties.setEnabled(selectedModel != null);
        createModelAsCopy.setEnabled(selectedModel != null);
        refreshCalcFields();
    }

    private void onMarketProposals() {
        List<Long> detailBatchIds = new ArrayList<Long>();
        detailBatchIds.add(detailBatch.getId());
        List<Long> contractorIds = new ArrayList<Long>();
        List<Long> currencyIds = new ArrayList<Long>();
        List<Long> measureUnitIds = new ArrayList<Long>();
        Dialogs.runProperties(new MarketProposalsForm(detailBatchIds, contractorIds, currencyIds, measureUnitIds));
    }

    private void initListeners() {
        browseModels.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                onBrowseModels();
            }
        });
        createModel.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                onCreateModell();
            }
        });
        createModelAsCopy.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                onCreateModelAsCopy();
            }
        });
        modelProperties.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                onModelProperties();
            }
        });

        bntScanBarCode.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                onScanBarCode();
            }
        });
        btnGenerateBarCode.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                onGenerateBarCode();
            }
        });

        btnContractorsProposals.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                onMarketProposals();
            }
        });

        //Creating listener, that helps us to update name, when any control value of the
        //detail batch have been changed.
        CalcFieldsRefreshListener nameRefreshListener = new CalcFieldsRefreshListener();
        batchAcceptance.addKeyListener(nameRefreshListener);
        batchYear.addKeyListener(nameRefreshListener);
        batchBarCode.addKeyListener(nameRefreshListener);
        batchNomenclatureArticle.addKeyListener(nameRefreshListener);
        batchManufacturer.addActionListener(nameRefreshListener);
        batchBuyPrice.addKeyListener(nameRefreshListener);
        batchSellPrice.addKeyListener(nameRefreshListener);
        batchCurrency.addActionListener(nameRefreshListener);
        batchSellPrice2.addKeyListener(nameRefreshListener);
        batchCurrency2.addActionListener(nameRefreshListener);
        batchCount.addKeyListener(nameRefreshListener);
        batchCountMeas.addActionListener(nameRefreshListener);
        batchNotice.addKeyListener(nameRefreshListener);
    }

    private void onGenerateBarCode() {
        if (StringUtils.hasValue(batchBarCode.getText())) {
            //Request confirmation from user in order not to change value by accident.
            boolean confirmChange = MessageDialogs.showConfirm(
                    I18nSupport.message("detail.batches.properties.generate.barcode.title"),
                    I18nSupport.message("detail.batches.properties.generate.barcode.message"));
            if (!confirmChange) {
                return;
            }
        }

        //Generate new bar code value.
        batchBarCode.setText(getDetailBatchesService().generateBarCode());
    }

    private void onScanBarCode() {
        //Input bar code from the scanner.
        String barCode = Dialogs.runSingleBarCodeInput();
        if (barCode != null) {
            //Change bar code field with a new one received from bar scanner.
            if (!StringUtils.isStringNullOrEmpty(batchBarCode.getText()) && !batchBarCode.getText().equals(barCode)) {
                String title = I18nSupport.message("detail.batches.properties.change.barcode.title");
                String message = I18nSupport.message("detail.batches.properties.change.barcode.message");
                if (!MessageDialogs.showConfirm(batchBarCode, title, message)) {
                    return;
                }
            }
            batchBarCode.setText(barCode);
        }
    }

    private void initButtons() {
        if (propertiesType == PropertiesType.CreateAsCopy) {
            createModel.setVisible(false);
            createModelAsCopy.setVisible(true);
            modelProperties.setVisible(true);
            browseModels.setVisible(false);
        } else if (propertiesType == PropertiesType.CreateNew) {
            createModel.setVisible(true);
            createModelAsCopy.setVisible(false);
            modelProperties.setVisible(true);
            browseModels.setVisible(true);
        } else if (propertiesType == PropertiesType.Properties) {
            createModel.setVisible(false);
            createModelAsCopy.setVisible(false);
            modelProperties.setVisible(true);
            browseModels.setVisible(false);
        } else {
            throw new RuntimeException("DetailBatchForm.initButtons: Not supported properties type.");
        }
    }

    private class CalcFieldsRefreshListener extends KeyAdapter implements ActionListener {
        public void actionPerformed(ActionEvent e) {
            refreshCalcFields();
        }

        public void keyReleased(KeyEvent e) {
            refreshCalcFields();
        }
    }

    private void refreshCalcFields() {
        //Refreshes calculated fields of the detial batch through recalculation of it.
        doSaveData(tempDetailBatch);
        batchName.setText(tempDetailBatch.getName());
        batchMisc.setText(tempDetailBatch.getMisc());
        batchType.setText(tempDetailBatch.getType());
    }

    private void doSaveData(DetailBatchTO batch) {
        batch.setModel(selectedModel);
        batch.setAcceptance(batchAcceptance.getText());
        batch.setYear(batchYear.getText().isEmpty() ? null : Integer.valueOf(batchYear.getText()));
        batch.setBarCode(batchBarCode.getText().isEmpty() ? null : batchBarCode.getText());
        batch.setNomenclatureArticle(batchNomenclatureArticle.getText().isEmpty() ? null : batchNomenclatureArticle.getText());
        batch.setManufacturer((ManufacturerTO) DataExchange.getComboSelection(batchManufacturer));
        batch.setBuyPrice(batchBuyPrice.getText().isEmpty() ? null : StringUtils.parseStringToBigDecimal(batchBuyPrice.getText()));
        batch.setSellPrice(batchSellPrice.getText().isEmpty() ? null : StringUtils.parseStringToBigDecimal(batchSellPrice.getText()));
        batch.setCurrency((CurrencyTO) DataExchange.getComboSelection(batchCurrency));
        batch.setSellPrice2(batchSellPrice2.getText().isEmpty() ? null : StringUtils.parseStringToBigDecimal(batchSellPrice2.getText()));
        batch.setCurrency2((CurrencyTO) DataExchange.getComboSelection(batchCurrency2));
        batch.setCountMeas((MeasureUnitTO) DataExchange.getComboSelection(batchCountMeas));
        batch.setNotice(batchNotice.getText());
    }
}
