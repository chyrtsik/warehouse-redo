/*
 * Copyright (c) 2007-2011 Artigile.
 * Software development company.
 * All Rights Reserved.
 *
 * This software is the confidential and proprietary information of Artigile. ("Confidential Information").
 * You shall not disclose such Confidential Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with Artigile software company.
 */

package com.artigile.warehouse.gui.core.properties.dialogs.browser;

import com.artigile.warehouse.gui.core.properties.PropertiesForm;
import com.artigile.warehouse.gui.core.properties.data.validation.DataValidation;
import com.artigile.warehouse.gui.core.properties.data.validation.DataValidationException;
import com.artigile.warehouse.gui.core.report.controller.ReportEditingStrategyAdapter;
import com.artigile.warehouse.gui.core.report.controller.TreeReport;
import com.artigile.warehouse.gui.utils.GridLayoutUtils;
import com.artigile.warehouse.utils.i18n.I18nSupport;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import org.jdesktop.swingx.JXTreeTable;

import javax.swing.*;
import java.awt.*;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

/**
 * @author Shyrik, 01.10.2009
 */
public class TreeBrowserForm implements PropertiesForm {
    private JPanel contentPanel;
    private JPanel treePanel;

    /**
     * Report, that is being used to browse data.
     */
    private TreeReport treeReport;

    /**
     * Title of the browser.
     */
    private String browserTitle;

    /**
     * List of selected items.
     */
    private Set<Object> selectedItems = new HashSet<Object>();

    /**
     * Component for working with checking/unchecking of items.
     */
    private CheckBoxTreeTableManager checkBoxTreeTableManager;

    public TreeBrowserForm(TreeReport treeReport, String browserTitle, boolean allowMultipleSelection, boolean recursivelyCheckItems) {
        this.treeReport = treeReport;
        this.treeReport.setReportEditingStrategyProxy(new ReportEditingStrategyAdapter());
        this.browserTitle = browserTitle;

        JXTreeTable treeTable = (JXTreeTable) treeReport.getReportView().getViewComponent();
        checkBoxTreeTableManager = new CheckBoxTreeTableManager(treeTable, treeReport.getTreeModel(), allowMultipleSelection, recursivelyCheckItems);
    }

    @Override
    public String getTitle() {
        return browserTitle;
    }

    @Override
    public JPanel getContentPanel() {
        return contentPanel;
    }

    @Override
    public boolean canSaveData() {
        return true;
    }

    @Override
    public void loadData() {
        treePanel.add(treeReport.getReportComponent(), GridLayoutUtils.getGrowingAndFillingCellConstraints());
    }

    @Override
    public void validateData() throws DataValidationException {
        DataValidation.checkCondition(getSelectedItems() != null, treePanel, I18nSupport.message("browser.error.chooseItems"));
    }

    @Override
    public void saveData() {
        selectedItems = checkBoxTreeTableManager.getCheckedItems();
    }

    public List<Object> getSelectedItems() {
        return new ArrayList<Object>(selectedItems);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPanel = new JPanel();
        contentPanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        treePanel = new JPanel();
        treePanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        contentPanel.add(treePanel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, new Dimension(600, 450), null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPanel;
    }
}
