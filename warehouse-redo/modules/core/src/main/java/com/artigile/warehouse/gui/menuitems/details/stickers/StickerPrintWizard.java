/*
 * Copyright (c) 2007-2013 Artigile.
 * Software development company.
 * All Rights Reserved.
 *
 * This software is the confidential and proprietary information of Artigile. ("Confidential Information").
 * You shall not disclose such Confidential Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with Artigile software company.
 */

package com.artigile.warehouse.gui.menuitems.details.stickers;

import com.artigile.warehouse.gui.core.plugin.FramePlugin;
import com.artigile.warehouse.gui.core.wizard.Wizard;
import com.artigile.warehouse.gui.core.wizard.WizardListener;
import com.artigile.warehouse.gui.core.wizard.WizardStep;
import com.artigile.warehouse.utils.i18n.I18nSupport;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import org.jdesktop.swingx.JXButton;
import org.jdesktop.swingx.JXLabel;
import org.jdesktop.swingx.VerticalLayout;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

/**
 * Step by step wizard to print stickers.
 *
 * @author Aliaksandr Chyrtsik
 * @since 21.07.13
 */
public class StickerPrintWizard extends FramePlugin {

    private JPanel contentPanel;

    private JPanel navigationPanel;

    private JPanel stepContentPanel;

    private Wizard wizard;

    public StickerPrintWizard() {
        WizardStep wizardStep = new ModelTypeWizardStep();
        this.wizard = new StickersPrintWizard(wizardStep);
        navigationPanel.setLayout(new VerticalLayout());
        refreshSteps(wizard);
        initListeners();
    }

    private void refreshSteps(final Wizard wizard) {
        navigationPanel.removeAll();
        boolean before = true;
        for (final WizardStep step : wizard.getSteps()) {
            boolean current = wizard.getCurrentStep() == step;
            if (current) {
                before = false;
            }
            if (before) {
                JXButton button = new JXButton(step.getName());
                button.setPreferredSize(step.getPreferredSize());
                button.addActionListener(new ActionListener() {

                    @Override
                    public void actionPerformed(ActionEvent e) {
                        wizard.setCurrentStep(step);
                        refreshSteps(wizard);
                    }
                });
                navigationPanel.add(button);
            } else {
                JXLabel label = new JXLabel(step.getName(), SwingConstants.CENTER);
                if (!current) {
                    label.setForeground(Color.GRAY);
                }
                label.setPreferredSize(step.getPreferredSize());
                navigationPanel.add(label);
            }
            if (current) {
                step.updatePanel(stepContentPanel);
            }
        }
        navigationPanel.revalidate();
        navigationPanel.repaint();
    }

    @Override
    public String getTitle() {
        return I18nSupport.message("stickers.print.wizard.title");
    }

    @Override
    public JPanel getContentPanel() {
        return contentPanel;
    }

    private void initListeners() {
        wizard.addWizardListener(new WizardListener() {

            @Override
            public void stateChanged(Wizard wizard) {
                refreshSteps(wizard);
            }
        });
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPanel = new JPanel();
        contentPanel.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        final JScrollPane scrollPane1 = new JScrollPane();
        contentPanel.add(scrollPane1, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        stepContentPanel = new JPanel();
        stepContentPanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        scrollPane1.setViewportView(stepContentPanel);
        final JLabel label1 = new JLabel();
        label1.setText("Current step content will be shown here");
        stepContentPanel.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JScrollPane scrollPane2 = new JScrollPane();
        scrollPane2.setHorizontalScrollBarPolicy(31);
        contentPanel.add(scrollPane2, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, 1, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(243, 24), null, 0, false));
        navigationPanel = new JPanel();
        navigationPanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        scrollPane2.setViewportView(navigationPanel);
        final JLabel label2 = new JLabel();
        label2.setText("Navigation will be shown here");
        navigationPanel.add(label2, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPanel;
    }
}
