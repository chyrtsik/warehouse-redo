/*
 * Copyright (c) 2007-2013 Artigile.
 * Software development company.
 * All Rights Reserved.
 *
 * This software is the confidential and proprietary information of Artigile. ("Confidential Information").
 * You shall not disclose such Confidential Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with Artigile software company.
 */

package com.artigile.warehouse.gui.menuitems.details.models;

import com.artigile.warehouse.bl.detail.DetailTypeService;
import com.artigile.warehouse.gui.core.properties.PropertiesForm;
import com.artigile.warehouse.gui.core.properties.data.exchange.DataExchange;
import com.artigile.warehouse.gui.core.properties.data.init.InitUtils;
import com.artigile.warehouse.gui.core.properties.data.validation.DataValidation;
import com.artigile.warehouse.gui.core.properties.data.validation.DataValidationException;
import com.artigile.warehouse.gui.core.properties.dialogs.MessageDialogs;
import com.artigile.warehouse.gui.utils.GridLayoutUtils;
import com.artigile.warehouse.gui.utils.UIComponentUtils;
import com.artigile.warehouse.gui.utils.fields.editor.FieldsEditor;
import com.artigile.warehouse.utils.SpringServiceContext;
import com.artigile.warehouse.utils.dto.details.DetailModelTO;
import com.artigile.warehouse.utils.dto.details.DetailTypeTO;
import com.artigile.warehouse.utils.dto.details.DetailTypeTOForReport;
import com.artigile.warehouse.utils.i18n.I18nSupport;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ResourceBundle;

/**
 * @author Shyrik, 22.12.2008
 */
public class DetailModelForm implements PropertiesForm {
    private JPanel contentPanel;
    private JComboBox detailType;
    private JPanel modelFieldsPanel;

    private FieldsEditor modelFieldsEditor;

    private DetailModelTO detailModel;
    private DetailModelTO tempDetailModel = new DetailModelTO(); //Used for editing (to recalculate fields)
    private boolean canEdit;

    private PropertiesType propertiesType; {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPanel = new JPanel();
        contentPanel.setLayout(new GridLayoutManager(2, 2, new Insets(0, 0, 10, 0), -1, -1));
        final JLabel label1 = new JLabel();
        this.$$$loadLabelText$$$(label1, ResourceBundle.getBundle("i18n/warehouse").getString("detail.models.properties.type"));
        contentPanel.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        detailType = new JComboBox();
        contentPanel.add(detailType, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, new Dimension(400, -1), null, null, 0, false));
        modelFieldsPanel = new JPanel();
        modelFieldsPanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        contentPanel.add(modelFieldsPanel, new GridConstraints(1, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, new Dimension(-1, 100), null, null, 0, false));
        modelFieldsPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), null));
    }

    /**
     * @noinspection ALL
     */
    private void $$$loadLabelText$$$(JLabel component, String text) {
        StringBuffer result = new StringBuffer();
        boolean haveMnemonic = false;
        char mnemonic = '\0';
        int mnemonicIndex = -1;
        for (int i = 0; i < text.length(); i++) {
            if (text.charAt(i) == '&') {
                i++;
                if (i == text.length()) break;
                if (!haveMnemonic && text.charAt(i) != '&') {
                    haveMnemonic = true;
                    mnemonic = text.charAt(i);
                    mnemonicIndex = result.length();
                }
            }
            result.append(text.charAt(i));
        }
        component.setText(result.toString());
        if (haveMnemonic) {
            component.setDisplayedMnemonic(mnemonic);
            component.setDisplayedMnemonicIndex(mnemonicIndex);
        }
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPanel;
    }

    public enum PropertiesType {
        CreateNew,    // Properties form for creating of new model.
        CreateAsCopy, // Properties form for creating of new model.
        Properties,   // View/edit properties of existing detail model.
        CreateNewForBatch, //Properties form for creating detail model to be referenced by the detal batch.
        CreateAsCopyForBatch, //Properties form for creating a copy of detail model to be referenced by the detal batch.
    }

    public DetailModelForm(DetailModelTO detailModel, boolean canEdit, PropertiesType propertiesType) {
        this.detailModel = detailModel;
        this.canEdit = canEdit;
        this.propertiesType = propertiesType;
        if (!detailModel.isNew()) {
            this.tempDetailModel.copyFrom(detailModel);
        }

        initDetailTypes();
    }

    @Override
    public String getTitle() {
        if (propertiesType == PropertiesType.CreateNew || propertiesType == PropertiesType.CreateNewForBatch) {
            return I18nSupport.message("detail.models.properties.title.createNew");
        } else if (propertiesType == PropertiesType.CreateAsCopy || propertiesType == PropertiesType.CreateAsCopyForBatch) {
            return I18nSupport.message("detail.models.properties.title.createAsCopy");
        } else if (propertiesType == PropertiesType.Properties) {
            return I18nSupport.message("detail.models.properties.title.properties");
        } else {
            throw new RuntimeException("DetailModelForm.getTitle: Not supported properties type.");
        }
    }

    @Override
    public JPanel getContentPanel() {
        return contentPanel;
    }

    @Override
    public boolean canSaveData() {
        return canEdit;
    }

    @Override
    public void loadData() {
        DataExchange.selectComboItem(detailType, detailModel.getType());
        if (modelFieldsEditor != null) {
            modelFieldsEditor.loadFields(detailModel.getFieldsInDisplayOrder());
        }
    }

    @Override
    public void validateData() throws DataValidationException {
        DataValidation.checkSelected(detailType);
        modelFieldsEditor.validateFields(tempDetailModel.getFieldsInDisplayOrder());

        if (!SpringServiceContext.getInstance().getDetailModelsService().isUniqueDetailModel(tempDetailModel)) {
            if (!canSelectExistingModelIfDuplicated()) {
                DataValidation.failRes("detail.models.error.modelIsNotUnique");
            } else {
                //Warn used about duplication, but suggest hem to choose existing model.
                String message = I18nSupport.message("detail.models.error.modelIsNotUnique.chooseExistingQuestion");
                String title = I18nSupport.message("detail.models.error.modelIsNotUnique.chooseExistingQuestion.title");
                if (MessageDialogs.showConfirm(contentPanel, title, message)) {
                    tempDetailModel = SpringServiceContext.getInstance().getDetailModelsService().getSameModels(tempDetailModel).get(0);
                    modelFieldsEditor.loadFields(detailModel.getFieldsInDisplayOrder());
                } else {
                    DataValidation.failRes("detail.models.error.modelIsNotUnique");
                }
            }
        }
    }

    @Override
    public void saveData() {
        modelFieldsEditor.saveFields(tempDetailModel.getFieldsInDisplayOrder());
        detailModel.copyFrom(tempDetailModel);
    }

    //=========================== Helpers ===================================================
    private boolean canSelectExistingModelIfDuplicated() {
        return propertiesType == PropertiesType.CreateNewForBatch || propertiesType == PropertiesType.CreateAsCopyForBatch;
    }

    private void initDetailTypes() {
        InitUtils.initProductTypesCombo(detailType);
        detailType.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                onSelectType();
            }
        });
        detailType.setEnabled(propertiesType == PropertiesType.CreateNew || propertiesType == PropertiesType.CreateNewForBatch);
    }

    private void onSelectType() {
        //Init detail model to have fields from selected detail type.
        DetailTypeTO selType = getSelectedDetailType();
        if (selType != null) {
            //And to reload values into new form.
            tempDetailModel.setType(getSelectedDetailType());
        }

        //Now we need to display new form (new set of fields).
        initModelForm();

        //Resizing dialog if needed to enclose fields content (fields may grow after loading their values).
        UIComponentUtils.packDialog(contentPanel);
    }

    private void initModelForm() {
        //Creating form with a list of fields, that fits the selected model detail type.
        modelFieldsPanel.removeAll();
        modelFieldsEditor = null;

        DetailTypeTO selType = getSelectedDetailType();
        if (selType == null) {
            return;
        }

        modelFieldsEditor = new FieldsEditor(selType.getFieldsInDisplayOrder());
        modelFieldsEditor.loadFields(tempDetailModel.getFieldsInDisplayOrder());

        modelFieldsPanel.add(modelFieldsEditor.getContentPanel(), GridLayoutUtils.getGrowingAndFillingCellConstraints());
        UIComponentUtils.packDialog(modelFieldsPanel);
    }

    private DetailTypeTO getSelectedDetailType() {
        DetailTypeTOForReport selType = (DetailTypeTOForReport) DataExchange.getComboSelection(detailType);
        if (selType != null) {
            return getDetailTypesService().getDetailTypeFullTO(selType);
        }
        return null;
    }

    private DetailTypeService getDetailTypesService() {
        return SpringServiceContext.getInstance().getDetailTypesService();
    }
}
