/*
 * Copyright (c) 2007-2011 Artigile.
 * Software art development company.
 * All Rights Reserved.
 *
 * This software is the confidential and proprietary information of Artigile. ("Confidential Information").
 * You shall not disclose such Confidential Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with Artigile software company.
 */

package com.artigile.warehouse.gui.menuitems.configuration.preferences;

import com.artigile.warehouse.utils.properties.savers.SplitPaneOrietationSaver;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ResourceBundle;

/**
 * @author Valery Barysok, 11.04.2010
 */
public class SplitPaneOrientation extends JPanel {
    private JRadioButton verticalBtn;
    private JRadioButton horizontalBtn;
    private JRadioButton defaultBtn;
    private JPanel contentPanel;
    private int orientation;

    public SplitPaneOrientation(int orientation) {
        setOrientation(orientation);
        setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        add(contentPanel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_GROW, new Dimension(-1, -1), new Dimension(-1, -1), null, 0, false));
        initListeners();
    }

    private void initListeners() {
        horizontalBtn.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                orientation = JSplitPane.HORIZONTAL_SPLIT;
            }
        });
        verticalBtn.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                orientation = JSplitPane.VERTICAL_SPLIT;
            }
        });
        defaultBtn.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                orientation = SplitPaneOrietationSaver.DEFAULT_ORIENTATION;
            }
        });
    }

    public void setOrientation(int orientation) {
        this.orientation = orientation;
        if (orientation == JSplitPane.VERTICAL_SPLIT) {
            verticalBtn.setSelected(true);
        } else if (orientation == JSplitPane.HORIZONTAL_SPLIT) {
            horizontalBtn.setSelected(true);
        } else {
            defaultBtn.setSelected(true);
        }
    }

    public int getOrientation() {
        return orientation;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPanel = new JPanel();
        contentPanel.setLayout(new GridLayoutManager(1, 5, new Insets(0, 0, 0, 0), -1, -1));
        verticalBtn = new JRadioButton();
        verticalBtn.setSelected(false);
        this.$$$loadButtonText$$$(verticalBtn, ResourceBundle.getBundle("i18n/warehouse").getString("configuration.preferences.splitpane.vertical"));
        contentPanel.add(verticalBtn, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        horizontalBtn = new JRadioButton();
        horizontalBtn.setSelected(false);
        this.$$$loadButtonText$$$(horizontalBtn, ResourceBundle.getBundle("i18n/warehouse").getString("configuration.preferences.splitpane.horizontal"));
        contentPanel.add(horizontalBtn, new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        defaultBtn = new JRadioButton();
        defaultBtn.setSelected(true);
        this.$$$loadButtonText$$$(defaultBtn, ResourceBundle.getBundle("i18n/warehouse").getString("configuration.preferences.splitpane.default"));
        contentPanel.add(defaultBtn, new GridConstraints(0, 4, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setIcon(new ImageIcon(getClass().getResource("/images/horizontal_splitter.png")));
        label1.setText("");
        contentPanel.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setIcon(new ImageIcon(getClass().getResource("/images/vertical_splitter.png")));
        label2.setText("");
        contentPanel.add(label2, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        ButtonGroup buttonGroup;
        buttonGroup = new ButtonGroup();
        buttonGroup.add(verticalBtn);
        buttonGroup.add(horizontalBtn);
        buttonGroup.add(defaultBtn);
    }

    /**
     * @noinspection ALL
     */
    private void $$$loadButtonText$$$(AbstractButton component, String text) {
        StringBuffer result = new StringBuffer();
        boolean haveMnemonic = false;
        char mnemonic = '\0';
        int mnemonicIndex = -1;
        for (int i = 0; i < text.length(); i++) {
            if (text.charAt(i) == '&') {
                i++;
                if (i == text.length()) break;
                if (!haveMnemonic && text.charAt(i) != '&') {
                    haveMnemonic = true;
                    mnemonic = text.charAt(i);
                    mnemonicIndex = result.length();
                }
            }
            result.append(text.charAt(i));
        }
        component.setText(result.toString());
        if (haveMnemonic) {
            component.setMnemonic(mnemonic);
            component.setDisplayedMnemonicIndex(mnemonicIndex);
        }
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPanel;
    }
}
