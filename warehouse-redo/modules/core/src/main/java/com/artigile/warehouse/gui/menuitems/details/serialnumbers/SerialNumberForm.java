/*
 * Copyright (c) 2007-2013 Artigile.
 * Software development company.
 * All Rights Reserved.
 *
 * This software is the confidential and proprietary information of Artigile. ("Confidential Information").
 * You shall not disclose such Confidential Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with Artigile software company.
 */

package com.artigile.warehouse.gui.menuitems.details.serialnumbers;

import com.artigile.warehouse.gui.core.properties.PropertiesForm;
import com.artigile.warehouse.gui.core.properties.data.validation.DataValidation;
import com.artigile.warehouse.gui.core.properties.data.validation.DataValidationException;
import com.artigile.warehouse.gui.core.properties.dialogs.Dialogs;
import com.artigile.warehouse.gui.core.properties.dialogs.browser.BrowseResult;
import com.artigile.warehouse.gui.menuitems.details.batches.DetailBatchesList;
import com.artigile.warehouse.gui.utils.GridLayoutUtils;
import com.artigile.warehouse.gui.utils.UIComponentUtils;
import com.artigile.warehouse.gui.utils.fields.editor.FieldsEditor;
import com.artigile.warehouse.utils.dto.details.DetailBatchTO;
import com.artigile.warehouse.utils.dto.details.DetailSerialNumberTO;
import com.artigile.warehouse.utils.i18n.I18nSupport;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ResourceBundle;

/**
 * Form for editing properties of product serial number.
 *
 * @author Aliaksandr Chyrtsik
 * @since 30.06.13
 */
public class SerialNumberForm implements PropertiesForm {
    private JPanel contentPanel;
    private JTextField fieldDetailBatch;
    private JButton browseDetailBatch;
    private JTextField fieldSerialNumber;
    private JPanel serialNumberFieldsPanel;

    private FieldsEditor serialNumberFieldsEditor;

    private DetailSerialNumberTO serialNumber;
    private DetailSerialNumberTO editSerialNumber = new DetailSerialNumberTO();
    private boolean canEdit;

    public SerialNumberForm(DetailSerialNumberTO serialNumber, boolean canEdit) {
        this.serialNumber = serialNumber;
        this.editSerialNumber.copyFrom(serialNumber);
        this.canEdit = canEdit;

        browseDetailBatch.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                onBrowseDetailBatch();
            }
        });
    }

    @Override
    public String getTitle() {
        return I18nSupport.message("serial.number.properties.title");
    }

    @Override
    public JPanel getContentPanel() {
        return contentPanel;
    }

    @Override
    public boolean canSaveData() {
        return canEdit;
    }

    @Override
    public void loadData() {
        fieldSerialNumber.setText(editSerialNumber.getId() != 0 ? String.valueOf(editSerialNumber.getId()) : I18nSupport.message("serial.number.properties.serial.number.default"));
        fieldDetailBatch.setText(editSerialNumber.getDetail() != null ? editSerialNumber.getDetail().getName() : null);
        initSerialNumberFields();
    }

    @Override
    public void validateData() throws DataValidationException {
        DataValidation.checkNotEmpty(fieldDetailBatch);
        serialNumberFieldsEditor.validateFields(editSerialNumber.getFieldsInDisplayOrder());
    }

    @Override
    public void saveData() {
        serialNumberFieldsEditor.saveFields(editSerialNumber.getFieldsInDisplayOrder());
        serialNumber.copyFrom(editSerialNumber);
    }

    private void onBrowseDetailBatch() {
        BrowseResult result = Dialogs.runBrowser(new DetailBatchesList());
        if (result.isOk()) {
            DetailBatchTO detailBatch = (DetailBatchTO) result.getSelectedItems().get(0);
            fieldDetailBatch.setText(detailBatch.getName());
            editSerialNumber.setDetail(detailBatch);
            initSerialNumberFields();
        }
    }

    private void initSerialNumberFields() {
        //Creating form with a list of fields, that fits the selected serial number.
        serialNumberFieldsPanel.removeAll();
        serialNumberFieldsEditor = null;

        if (editSerialNumber.getDetail() == null) {
            return;
        }

        serialNumberFieldsEditor = new FieldsEditor(editSerialNumber.getDetail().getModel().getType().getSerialNumberFieldsInDisplayOrder());
        serialNumberFieldsEditor.loadFields(editSerialNumber.getFieldsInDisplayOrder());

        serialNumberFieldsPanel.add(serialNumberFieldsEditor.getContentPanel(), GridLayoutUtils.getGrowingAndFillingCellConstraints());
        UIComponentUtils.packDialog(serialNumberFieldsPanel);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPanel = new JPanel();
        contentPanel.setLayout(new GridLayoutManager(4, 2, new Insets(0, 0, 0, 0), -1, -1));
        final JLabel label1 = new JLabel();
        this.$$$loadLabelText$$$(label1, ResourceBundle.getBundle("i18n/warehouse").getString("serial.number.properties.serial.number"));
        contentPanel.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label2 = new JLabel();
        this.$$$loadLabelText$$$(label2, ResourceBundle.getBundle("i18n/warehouse").getString("serial.number.properties.detail"));
        contentPanel.add(label2, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        contentPanel.add(panel1, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, 1, null, null, null, 0, false));
        fieldDetailBatch = new JTextField();
        fieldDetailBatch.setEditable(false);
        panel1.add(fieldDetailBatch, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(300, -1), null, 0, false));
        browseDetailBatch = new JButton();
        browseDetailBatch.setText("...");
        panel1.add(browseDetailBatch, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        contentPanel.add(panel2, new GridConstraints(2, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, 1, null, null, null, 0, false));
        final JLabel label3 = new JLabel();
        this.$$$loadLabelText$$$(label3, ResourceBundle.getBundle("i18n/warehouse").getString("serial.number.properties.fields"));
        panel2.add(label3, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        panel2.add(spacer1, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        fieldSerialNumber = new JTextField();
        fieldSerialNumber.setEditable(false);
        contentPanel.add(fieldSerialNumber, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        serialNumberFieldsPanel = new JPanel();
        serialNumberFieldsPanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        contentPanel.add(serialNumberFieldsPanel, new GridConstraints(3, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, new Dimension(-1, 100), null, null, 0, false));
        serialNumberFieldsPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), null));
    }

    /**
     * @noinspection ALL
     */
    private void $$$loadLabelText$$$(JLabel component, String text) {
        StringBuffer result = new StringBuffer();
        boolean haveMnemonic = false;
        char mnemonic = '\0';
        int mnemonicIndex = -1;
        for (int i = 0; i < text.length(); i++) {
            if (text.charAt(i) == '&') {
                i++;
                if (i == text.length()) break;
                if (!haveMnemonic && text.charAt(i) != '&') {
                    haveMnemonic = true;
                    mnemonic = text.charAt(i);
                    mnemonicIndex = result.length();
                }
            }
            result.append(text.charAt(i));
        }
        component.setText(result.toString());
        if (haveMnemonic) {
            component.setDisplayedMnemonic(mnemonic);
            component.setDisplayedMnemonicIndex(mnemonicIndex);
        }
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPanel;
    }
}
