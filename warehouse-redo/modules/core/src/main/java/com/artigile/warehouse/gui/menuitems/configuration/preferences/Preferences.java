/*
 * Copyright (c) 2007-2011 Artigile.
 * Software art development company.
 * All Rights Reserved.
 *
 * This software is the confidential and proprietary information of Artigile. ("Confidential Information").
 * You shall not disclose such Confidential Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with Artigile software company.
 */

package com.artigile.warehouse.gui.menuitems.configuration.preferences;

import com.artigile.warehouse.gui.core.properties.PropertiesForm;
import com.artigile.warehouse.gui.core.properties.data.validation.DataValidationException;
import com.artigile.warehouse.gui.core.splitter.SplitPaneManager;
import com.artigile.warehouse.gui.core.splitter.SplitPaneSettings;
import com.artigile.warehouse.utils.i18n.I18nSupport;
import com.artigile.warehouse.utils.properties.savers.SplitPaneOrietationSaver;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;

import javax.swing.*;
import java.awt.*;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.ResourceBundle;

/**
 * @author Valery Barysok, 11.04.2010
 */
public class Preferences implements PropertiesForm {
    private JPanel contentPanel;
    private JPanel splitPaneSettingsPanel;
    private JPanel reportNamePanel;
    private Map<SplitPaneOrientation, Class> splitPaneOrientations = new HashMap<SplitPaneOrientation, Class>();

    public Preferences() {
        $$$setupUI$$$();
        splitPaneSettingsPanel.setLayout(new BoxLayout(splitPaneSettingsPanel, BoxLayout.Y_AXIS));
        reportNamePanel.setLayout(new BoxLayout(reportNamePanel, BoxLayout.Y_AXIS));
    }

    @Override
    public String getTitle() {
        return I18nSupport.message("configuration.preferences.title");
    }

    @Override
    public JPanel getContentPanel() {
        return contentPanel;
    }

    @Override
    public boolean canSaveData() {
        return true;
    }

    @Override
    public void loadData() {
        List<SplitPaneSettings> splitPaneSettingsList = SplitPaneManager.getInstance().getSplitPaneSettings();
        for (SplitPaneSettings settings : splitPaneSettingsList) {
            SplitPaneOrientation splitPaneOrientation = new SplitPaneOrientation(SplitPaneOrietationSaver.getOrientation(settings.getClazz()));
            splitPaneOrientations.put(splitPaneOrientation, settings.getClazz());
            reportNamePanel.add(new Label(settings.getTitle()));
            splitPaneSettingsPanel.add(splitPaneOrientation);
        }
    }

    @Override
    public void validateData() throws DataValidationException {
    }

    @Override
    public void saveData() {
        for (Entry<SplitPaneOrientation, Class> orientationClass : splitPaneOrientations.entrySet()) {
            SplitPaneOrietationSaver.store(orientationClass.getKey().getOrientation(), orientationClass.getValue());
        }
    }

    private void createUIComponents() {
        splitPaneSettingsPanel = new JPanel();
        splitPaneSettingsPanel.setLayout(new BoxLayout(splitPaneSettingsPanel, BoxLayout.Y_AXIS));
        reportNamePanel = new JPanel();
        reportNamePanel.setLayout(new BoxLayout(reportNamePanel, BoxLayout.Y_AXIS));
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        contentPanel = new JPanel();
        contentPanel.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        panel1.add(contentPanel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        splitPaneSettingsPanel.setLayout(new BorderLayout(0, 0));
        contentPanel.add(splitPaneSettingsPanel, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        splitPaneSettingsPanel.add(panel2, BorderLayout.NORTH);
        final JLabel label1 = new JLabel();
        this.$$$loadLabelText$$$(label1, ResourceBundle.getBundle("i18n/warehouse").getString("configuration.preferences.work.place.orientation"));
        panel2.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        reportNamePanel.setLayout(new BorderLayout(0, 0));
        contentPanel.add(reportNamePanel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        reportNamePanel.add(panel3, BorderLayout.NORTH);
        final JLabel label2 = new JLabel();
        this.$$$loadLabelText$$$(label2, ResourceBundle.getBundle("i18n/warehouse").getString("configuration.preferences.report.title"));
        panel3.add(label2, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private void $$$loadLabelText$$$(JLabel component, String text) {
        StringBuffer result = new StringBuffer();
        boolean haveMnemonic = false;
        char mnemonic = '\0';
        int mnemonicIndex = -1;
        for (int i = 0; i < text.length(); i++) {
            if (text.charAt(i) == '&') {
                i++;
                if (i == text.length()) break;
                if (!haveMnemonic && text.charAt(i) != '&') {
                    haveMnemonic = true;
                    mnemonic = text.charAt(i);
                    mnemonicIndex = result.length();
                }
            }
            result.append(text.charAt(i));
        }
        component.setText(result.toString());
        if (haveMnemonic) {
            component.setDisplayedMnemonic(mnemonic);
            component.setDisplayedMnemonicIndex(mnemonicIndex);
        }
    }
}
