/*
 * Copyright (c) 2007-2013 Artigile.
 * Software development company.
 * All Rights Reserved.
 *
 * This software is the confidential and proprietary information of Artigile. ("Confidential Information").
 * You shall not disclose such Confidential Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with Artigile software company.
 */

package com.artigile.warehouse.gui.menuitems.details.history;

import com.artigile.warehouse.gui.core.properties.PropertiesForm;
import com.artigile.warehouse.gui.core.properties.data.exchange.ListItem;
import com.artigile.warehouse.gui.core.properties.data.validation.DataValidation;
import com.artigile.warehouse.gui.core.properties.data.validation.DataValidationException;
import com.artigile.warehouse.utils.SpringServiceContext;
import com.artigile.warehouse.utils.StringUtils;
import com.artigile.warehouse.utils.date.DateUtils;
import com.artigile.warehouse.utils.dto.warehouse.WarehouseTOForReport;
import com.artigile.warehouse.utils.i18n.I18nSupport;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import org.jdesktop.swingx.JXDatePicker;

import javax.swing.*;
import java.awt.*;
import java.util.*;
import java.util.List;

/**
 * @author Aliaksandr Chyrtsik
 * @since 14.05.13
 */
public class DetailOperationHistoryFilterForm implements PropertiesForm {

    private JPanel contentPane;

    private JXDatePicker fieldPeriodStart;

    private JList fieldWarehouses;

    private JXDatePicker fieldPeriodEnd;

    private JCheckBox fieldPrintEmptyItems;

    public DetailOperationHistoryFilterForm() {
        //Initialize with default filtering values.
        fieldPeriodStart.setFormats(StringUtils.getDateFormat());
        fieldPeriodEnd.setFormats(StringUtils.getDateFormat());

        fieldPeriodStart.setDate(DateUtils.getBeginningOfMonth(Calendar.getInstance().getTime()));
        fieldPeriodEnd.setDate(Calendar.getInstance().getTime());

        fieldPrintEmptyItems.setSelected(true);

        List<WarehouseTOForReport> warehouses = SpringServiceContext.getInstance().getWarehouseService().getAllForReport();
        List<ListItem> warehouseItems = new ArrayList<ListItem>(warehouses.size());
        for (WarehouseTOForReport warehouse : warehouses) {
            warehouseItems.add(new ListItem(warehouse.getName(), warehouse.getId()));
        }
        fieldWarehouses.setListData(warehouseItems.toArray());
        fieldWarehouses.addSelectionInterval(0, warehouseItems.size() - 1);
    }

    @Override
    public String getTitle() {
        return I18nSupport.message("detail.batch.history.filter.title");
    }

    @Override
    public JPanel getContentPanel() {
        return contentPane;
    }

    @Override
    public boolean canSaveData() {
        return true;
    }

    @Override
    public void loadData() {
    }

    @Override
    public void validateData() throws DataValidationException {
        Date today = Calendar.getInstance().getTime();

        DataValidation.checkNotNull(fieldPeriodStart.getDate(), fieldPeriodStart);
        DataValidation.checkCondition(!fieldPeriodStart.getDate().after(today), fieldPeriodStart, "detail.batch.history.filter.validation.start.date.in.future");
        DataValidation.checkNotNull(fieldPeriodEnd.getDate(), fieldPeriodEnd);
        DataValidation.checkCondition(!fieldPeriodEnd.getDate().after(today), fieldPeriodEnd, "detail.batch.history.filter.validation.end.date.in.future");
        DataValidation.checkCondition(!fieldPeriodStart.getDate().after(fieldPeriodEnd.getDate()), fieldPeriodEnd, "detail.batch.history.filter.validation.end.date.before.start.date");

        DataValidation.checkCondition(!fieldWarehouses.isSelectionEmpty(), fieldWarehouses, "detail.batch.history.filter.validation.warehouse.not.selected");
    }

    @Override
    public void saveData() {
    }

    public Date getPeriodStart() {
        return fieldPeriodStart.getDate();
    }

    public Date getPeriodEnd() {
        return fieldPeriodEnd.getDate();
    }

    public List<Long> getWarehouseIds() {
        Object[] selectedWarehouses = fieldWarehouses.getSelectedValues();
        List<Long> warehouseIds = new ArrayList<Long>(selectedWarehouses.length);
        for (Object warehouseObj : selectedWarehouses) {
            warehouseIds.add((Long) ((ListItem) warehouseObj).getValue());
        }
        return warehouseIds;
    }

    public boolean isPrintEmptyItems() {
        return fieldPrintEmptyItems.isSelected();
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPane = new JPanel();
        contentPane.setLayout(new GridLayoutManager(5, 2, new Insets(0, 0, 0, 0), -1, -1));
        final JLabel label1 = new JLabel();
        this.$$$loadLabelText$$$(label1, ResourceBundle.getBundle("i18n/warehouse").getString("detail.batch.history.filter.period.start"));
        contentPane.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label2 = new JLabel();
        this.$$$loadLabelText$$$(label2, ResourceBundle.getBundle("i18n/warehouse").getString("detail.batch.history.filter.period.end"));
        contentPane.add(label2, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label3 = new JLabel();
        this.$$$loadLabelText$$$(label3, ResourceBundle.getBundle("i18n/warehouse").getString("detail.batch.history.filter.warehouses"));
        contentPane.add(label3, new GridConstraints(2, 0, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        contentPane.add(scrollPane1, new GridConstraints(3, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, new Dimension(-1, 150), null, null, 0, false));
        fieldWarehouses = new JList();
        scrollPane1.setViewportView(fieldWarehouses);
        fieldPeriodStart = new JXDatePicker();
        fieldPeriodStart.setLightWeightPopupEnabled(true);
        contentPane.add(fieldPeriodStart, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        fieldPeriodEnd = new JXDatePicker();
        fieldPeriodEnd.setLightWeightPopupEnabled(true);
        contentPane.add(fieldPeriodEnd, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        fieldPrintEmptyItems = new JCheckBox();
        this.$$$loadButtonText$$$(fieldPrintEmptyItems, ResourceBundle.getBundle("i18n/warehouse").getString("detail.batch.history.filter.print.empty.items"));
        contentPane.add(fieldPrintEmptyItems, new GridConstraints(4, 0, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private void $$$loadLabelText$$$(JLabel component, String text) {
        StringBuffer result = new StringBuffer();
        boolean haveMnemonic = false;
        char mnemonic = '\0';
        int mnemonicIndex = -1;
        for (int i = 0; i < text.length(); i++) {
            if (text.charAt(i) == '&') {
                i++;
                if (i == text.length()) break;
                if (!haveMnemonic && text.charAt(i) != '&') {
                    haveMnemonic = true;
                    mnemonic = text.charAt(i);
                    mnemonicIndex = result.length();
                }
            }
            result.append(text.charAt(i));
        }
        component.setText(result.toString());
        if (haveMnemonic) {
            component.setDisplayedMnemonic(mnemonic);
            component.setDisplayedMnemonicIndex(mnemonicIndex);
        }
    }

    /**
     * @noinspection ALL
     */
    private void $$$loadButtonText$$$(AbstractButton component, String text) {
        StringBuffer result = new StringBuffer();
        boolean haveMnemonic = false;
        char mnemonic = '\0';
        int mnemonicIndex = -1;
        for (int i = 0; i < text.length(); i++) {
            if (text.charAt(i) == '&') {
                i++;
                if (i == text.length()) break;
                if (!haveMnemonic && text.charAt(i) != '&') {
                    haveMnemonic = true;
                    mnemonic = text.charAt(i);
                    mnemonicIndex = result.length();
                }
            }
            result.append(text.charAt(i));
        }
        component.setText(result.toString());
        if (haveMnemonic) {
            component.setMnemonic(mnemonic);
            component.setDisplayedMnemonicIndex(mnemonicIndex);
        }
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }
}
