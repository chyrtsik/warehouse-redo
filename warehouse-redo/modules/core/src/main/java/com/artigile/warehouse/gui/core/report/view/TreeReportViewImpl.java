/*
 * Copyright (c) 2007-2011 Artigile.
 * Software development company.
 * All Rights Reserved.
 *
 * This software is the confidential and proprietary information of Artigile. ("Confidential Information").
 * You shall not disclose such Confidential Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with Artigile software company.
 */

package com.artigile.warehouse.gui.core.report.view;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import org.jdesktop.swingx.treetable.TreeTableModel;

import javax.swing.*;
import javax.swing.event.TreeModelListener;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.TreeModel;
import javax.swing.tree.TreePath;
import java.awt.*;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

/**
 * View class for tree reports (without columns, just tree).
 *
 * @author Aliaksandr.Chyrtsik, 24.10.11
 */
public class TreeReportViewImpl implements TreeTableReportView {
    private JTree tree;
    private JPanel contentPanel;

    private Set<ReportSelectionListener> selectionListeners = new HashSet<ReportSelectionListener>();

    /**
     * Constructor. Used to create a tree table, based on programmer-defined model.
     *
     * @param treeTableModel model, provided for the tree table.
     * @param nameColumn     column used for items name generation (names are shown in the tree).
     */
    public TreeReportViewImpl(TreeTableModel treeTableModel, int nameColumn) {
        $$$setupUI$$$();
        tree.setModel(new TreeTableForTreeModelWrapper(treeTableModel, nameColumn));
        //tree.putClientProperty("JTree.lineStyle", "Angled");

        tree.addTreeSelectionListener(new TreeSelectionListener() {
            @Override
            public void valueChanged(TreeSelectionEvent e) {
                for (ReportSelectionListener listener : selectionListeners) {
                    listener.onSelectionChanged();
                }
            }
        });
    }

    private void createUIComponents() {
        tree = new JTree();
    }

    @Override
    public List getSelectedItems() {
        if (tree.getSelectionCount() == 0) {
            return null;
        }
        List<Object> items = new ArrayList<Object>();
        items.add(((TreeTableForTreeModelWrapper.TreeItemWrapper) tree.getSelectionPath().getLastPathComponent()).getObject());
        return items;
    }

    @Override
    public List getDisplayedItems() {
        //Not used.
        return null;
    }

    @Override
    public Component getViewComponent() {
        return tree;
    }

    @Override
    public Component getContentPanel() {
        return contentPanel;
    }

    @Override
    public void addSelectionListener(ReportSelectionListener listener) {
        selectionListeners.add(listener);
    }

    @Override
    public void removeSelectionListener(ReportSelectionListener listener) {
        selectionListeners.remove(listener);
    }

    @Override
    public int getSelectedColumn() {
        //Only one column is used.
        return 0;
    }

    @Override
    public TreePath getSelectedPath() {
        return tree.getSelectionPath();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        contentPanel = new JPanel();
        contentPanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        final JScrollPane scrollPane1 = new JScrollPane();
        contentPanel.add(scrollPane1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, new Dimension(50, 50), null, null, 0, false));
        tree.setRootVisible(false);
        tree.setShowsRootHandles(true);
        tree.putClientProperty("JTree.lineStyle", "");
        scrollPane1.setViewportView(tree);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPanel;
    }

    /**
     * This wrapper uses tree table model to generate tree content properly.
     */
    private class TreeTableForTreeModelWrapper implements TreeModel {
        private TreeTableModel treeTableModel;
        private int column;

        public TreeTableForTreeModelWrapper(TreeTableModel treeTableModel, int nameColumn) {
            this.treeTableModel = treeTableModel;
            this.column = nameColumn;
        }

        @Override
        public Object getRoot() {
            return wrapTreeItem(treeTableModel.getRoot());
        }

        @Override
        public Object getChild(Object parent, int index) {
            return wrapTreeItem(treeTableModel.getChild(((TreeItemWrapper) parent).getObject(), index));
        }

        @Override
        public int getChildCount(Object parent) {
            return treeTableModel.getChildCount(((TreeItemWrapper) parent).getObject());
        }

        @Override
        public boolean isLeaf(Object node) {
            return treeTableModel.isLeaf(((TreeItemWrapper) node).getObject());
        }

        @Override
        public void valueForPathChanged(TreePath path, Object newValue) {
            treeTableModel.valueForPathChanged(path, ((TreeItemWrapper) newValue).getObject());
        }

        @Override
        public int getIndexOfChild(Object parent, Object child) {
            return treeTableModel.getIndexOfChild(((TreeItemWrapper) parent).getObject(), ((TreeItemWrapper) child).getObject());
        }

        @Override
        public void addTreeModelListener(TreeModelListener l) {
            treeTableModel.addTreeModelListener(l);
        }

        @Override
        public void removeTreeModelListener(TreeModelListener l) {
            treeTableModel.removeTreeModelListener(l);
        }

        private Object wrapTreeItem(Object object) {
            return new TreeItemWrapper(object);
        }

        /**
         * Wrapper for original items from tree.
         */
        private class TreeItemWrapper {
            private Object object;

            private TreeItemWrapper(Object object) {
                this.object = object;
            }

            public String toString() {
                Object value = treeTableModel.getValueAt(object, column);
                return value == null ? null : value.toString();
            }

            public Object getObject() {
                return object;
            }
        }
    }
}
