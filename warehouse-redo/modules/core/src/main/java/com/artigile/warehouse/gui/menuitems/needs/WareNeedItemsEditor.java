/*
 * Copyright (c) 2007-2011 Artigile.
 * Software development company.
 * All Rights Reserved.
 *
 * This software is the confidential and proprietary information of Artigile. ("Confidential Information").
 * You shall not disclose such Confidential Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with Artigile software company.
 */

package com.artigile.warehouse.gui.menuitems.needs;

import com.artigile.warehouse.domain.admin.PermissionType;
import com.artigile.warehouse.gui.core.plugin.FramePlugin;
import com.artigile.warehouse.gui.core.properties.PropertiesForm;
import com.artigile.warehouse.gui.core.properties.dialogs.Dialogs;
import com.artigile.warehouse.gui.core.properties.dialogs.MessageDialogs;
import com.artigile.warehouse.gui.core.report.command.CustomCommand;
import com.artigile.warehouse.gui.core.report.command.ReportCommandContext;
import com.artigile.warehouse.gui.core.report.command.ReportCommandList;
import com.artigile.warehouse.gui.core.report.command.ReportCommandListImpl;
import com.artigile.warehouse.gui.core.report.command.availability.PermissionCommandAvailability;
import com.artigile.warehouse.gui.core.report.command.naming.ResourceCommandNaming;
import com.artigile.warehouse.gui.core.report.controller.ReportDataSource;
import com.artigile.warehouse.gui.core.report.controller.TableReport;
import com.artigile.warehouse.gui.core.report.decorator.ReportCommandsDecorator;
import com.artigile.warehouse.gui.core.report.exceptions.ReportCommandException;
import com.artigile.warehouse.gui.core.switchable.SwitchableView;
import com.artigile.warehouse.gui.core.switchable.SwitchableViewItem;
import com.artigile.warehouse.gui.menuitems.details.batches.DetailBatchesList;
import com.artigile.warehouse.gui.menuitems.details.catalog.DetailCatalog;
import com.artigile.warehouse.gui.menuitems.details.catalog.DetailCatalogBatchesListFactory;
import com.artigile.warehouse.gui.menuitems.details.outofstock.OutOfStockProductsList;
import com.artigile.warehouse.gui.utils.GridLayoutUtils;
import com.artigile.warehouse.utils.SpringServiceContext;
import com.artigile.warehouse.utils.dto.details.DetailBatchTO;
import com.artigile.warehouse.utils.dto.details.DetailGroupTO;
import com.artigile.warehouse.utils.dto.details.outofstock.OutOfStockProductTO;
import com.artigile.warehouse.utils.dto.needs.WareNeedItemTO;
import com.artigile.warehouse.utils.dto.needs.WareNeedTO;
import com.artigile.warehouse.utils.i18n.I18nSupport;
import com.artigile.warehouse.utils.properties.Properties;
import com.artigile.warehouse.utils.properties.savers.SplitPaneOrietationSaver;
import com.artigile.warehouse.utils.properties.savers.SplitPaneSaver;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import org.jetbrains.annotations.NotNull;

import javax.swing.*;
import java.awt.*;
import java.util.ArrayList;

/**
 * @author Shyrik, 28.02.2009
 */
public class WareNeedItemsEditor extends FramePlugin {
    private JPanel contentPanel;
    private JPanel detailBatchesPanel;
    private JPanel needItemsPanel;
    private JSplitPane splitPane;

    private WareNeedTO wareNeed;

    private SwitchableView detailBatchesView;
    private static final String PROPERTY_DETAIL_BATCHES_VIEW_INDEX = "WareNeedItemsEditor.DetailBatchesView.SelectedIndex";

    public WareNeedItemsEditor() {
        this(SpringServiceContext.getInstance().getWareNeedsService().getMainWareNeedId());
    }

    public WareNeedItemsEditor(long wareNeedId) {
        wareNeed = SpringServiceContext.getInstance().getWareNeedsService().getWareNeedForEditing(wareNeedId);
        initDetailBatchesList();
        initWareNeedItemsList();
    }

    @Override
    public String getTitle() {
        return I18nSupport.message("wareNeed.items.editor.title");
    }

    @Override
    public JPanel getContentPanel() {
        return contentPanel;
    }

    @Override
    protected void onFrameOpened() {
        super.onFrameOpened();

        SplitPaneSaver.restore(splitPane, getFrameId());
        SplitPaneOrietationSaver.restore(splitPane, WareNeedItemsEditor.class);
    }

    @Override
    protected void onFrameClosed() {
        SplitPaneSaver.store(splitPane, getFrameId());
        if (detailBatchesView != null) {
            Properties.setProperty(PROPERTY_DETAIL_BATCHES_VIEW_INDEX, String.valueOf(detailBatchesView.getSelectedViewIndex()));
        }

        super.onFrameClosed();
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPanel = new JPanel();
        contentPanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        splitPane = new JSplitPane();
        splitPane.setDividerLocation(300);
        splitPane.setDividerSize(6);
        contentPanel.add(splitPane, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, new Dimension(300, 150), null, null, 0, false));
        detailBatchesPanel = new JPanel();
        detailBatchesPanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        splitPane.setLeftComponent(detailBatchesPanel);
        needItemsPanel = new JPanel();
        needItemsPanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        splitPane.setRightComponent(needItemsPanel);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPanel;
    }

    //========================================= Helpers ===========================================

    /**
     * Command implementation for adding new item to the ware need with filling item's form.
     */
    private class AddItemToWareNeedCommand extends CustomCommand {
        private AddItemToWareNeedCommand() {
            super(new ResourceCommandNaming("wareNeed.items.editor.addToNeed.command"), getAddItemAvailability());
        }

        @Override
        protected boolean doExecute(ReportCommandContext context) throws ReportCommandException {
            //Try to add new detail item to the ware need.
            DetailBatchTO detailBatchToAdd = (DetailBatchTO) context.getCurrentReportItem();
            WareNeedItemTO newWareNeedItem = new WareNeedItemTO(wareNeed, detailBatchToAdd, true);
            PropertiesForm prop = new WareNeedItemForm(newWareNeedItem, true);
            if (Dialogs.runProperties(prop)) {
                WareNeedItemTO existsWareNeedItem = getSimilarExist(newWareNeedItem);
                if (existsWareNeedItem != null) {
                    boolean modifyExistingItem = MessageDialogs.showConfirm(
                            I18nSupport.message("wareNeed.item.properties.title"),
                            I18nSupport.message("wareNeed.item.add.to.element.that.already.exists"));
                    if (!modifyExistingItem) {
                        existsWareNeedItem = null;
                    }
                }

                onAddNewWareNeedItem(newWareNeedItem, existsWareNeedItem);

                return true;
            }
            return false;
        }
    }

    private WareNeedItemTO getSimilarExist(WareNeedItemTO newWareNeedItem) {
        for (WareNeedItemTO item : newWareNeedItem.getWareNeed().getItems()) {
            if (item.getDetailBatch().equals(newWareNeedItem.getDetailBatch())
                    && item.getCustomer() == newWareNeedItem.getCustomer()
                    && item.getAutoCreated() == newWareNeedItem.getAutoCreated()) {
                return item;
            }
        }
        return null;
    }

    @NotNull
    private static PermissionCommandAvailability getAddItemAvailability() {
        return new PermissionCommandAvailability(PermissionType.EDIT_WARE_NEED_ITEMS);
    }

    /**
     * Command for quick adding posting item.
     */
//    private class QuickAddToWareNeedCommand extends CustomCommand {
//        private QuickAddToWareNeedCommand() {
//            super(new ResourceCommandNaming("wareNeed.items.editor.quickAddToNeed.command"), new PermissionCommandAvailability(PermissionType.EDIT_WARE_NEED_ITEMS));
//        }
//
//        @Override
//        protected boolean doExecute(ReportCommandContext context) throws ReportCommandException {
//            //Add new detail batch to the ware need items list.
//            DetailBatchTO detailBatchToAdd = (DetailBatchTO) context.getCurrentReportItem();
//            WareNeedItemTO newWareNeedItem = new WareNeedItemTO(wareNeed, detailBatchToAdd, true);
//            onAddNewWareNeedItem(newWareNeedItem);
//            return true;
//        }
//    }

    private class AddOutOfStockItemToWareNeedCommand extends CustomCommand {
        protected AddOutOfStockItemToWareNeedCommand() {
            super(new ResourceCommandNaming("wareNeed.items.editor.addToNeed.command"), getAddItemAvailability());
        }

        @Override
        protected boolean doExecute(ReportCommandContext context) throws ReportCommandException {
            OutOfStockProductTO item = (OutOfStockProductTO)context.getCurrentReportItem();
            DetailBatchTO detailBatchToAdd = SpringServiceContext.getInstance().getDetailBatchesService().getBatch(item.getId());
            WareNeedItemTO wareNeedItem = new WareNeedItemTO(wareNeed, detailBatchToAdd, true);
            if (item.getOrderedCount() < item.getCountToOrder()) {
                wareNeedItem.setCount(item.getCountToOrder() - item.getOrderedCount());
            }

            PropertiesForm prop = new WareNeedItemForm(wareNeedItem, true);
            if (Dialogs.runProperties(prop)) {
                WareNeedItemTO existsWareNeedItem = getSimilarExist(wareNeedItem);
                if (existsWareNeedItem != null) {
                    boolean modifyExistingItem = MessageDialogs.showConfirm(
                            I18nSupport.message("wareNeed.item.properties.title"),
                            I18nSupport.message("wareNeed.item.add.to.element.that.already.exists"));
                    if (!modifyExistingItem) {
                        existsWareNeedItem = null;
                    }
                }

                onAddNewWareNeedItem(wareNeedItem, existsWareNeedItem);

                return true;
            }
            return false;
        }
    }

    /**
     * Adding new item to ware need items list.
     *
     * @param newWareNeedItem
     * @param existsWareNeedItem
     * @return
     */
    private void onAddNewWareNeedItem(WareNeedItemTO newWareNeedItem, WareNeedItemTO existsWareNeedItem) {
        if (existsWareNeedItem == null) {
            wareNeed.addNewItem(newWareNeedItem);
        } else {
            existsWareNeedItem.setBuyPrice(newWareNeedItem.getBuyPrice());
            existsWareNeedItem.setBuyCurrency(newWareNeedItem.getBuyCurrency());
            existsWareNeedItem.setCount(existsWareNeedItem.getCount() + newWareNeedItem.getCount());
            existsWareNeedItem.setCreateDateTime(newWareNeedItem.getCreateDateTime());
            existsWareNeedItem.setCreatedUser(newWareNeedItem.getCreatedUser());
            existsWareNeedItem.setNotice(newWareNeedItem.getNotice());
            existsWareNeedItem.setMaxPrice(newWareNeedItem.getMaxPrice());
            existsWareNeedItem.setMinYear(newWareNeedItem.getMinYear());
            existsWareNeedItem.setCustomer(newWareNeedItem.getCustomer());
            existsWareNeedItem.setMisc(newWareNeedItem.getMisc());
            SpringServiceContext.getInstance().getWareNeedsService().saveWareNeedItem(existsWareNeedItem);
        }
    }

    private void initDetailBatchesList() {
        //Initialize switchable view for providing multiple ways or details batch selection.
        java.util.List<SwitchableViewItem> viewItems = new ArrayList<SwitchableViewItem>();

        //Out of stock items
        viewItems.add(new SwitchableViewItem() {
            @Override
            public String getName() {
                return I18nSupport.message("detail.batch.outofstock.title");
            }

            @Override
            public Component getCreateViewComponent() {
                //Decorates the list with a new commands for adding purchase items to list.
                ReportCommandList additionalCommands = new ReportCommandListImpl();
                additionalCommands.add(new AddOutOfStockItemToWareNeedCommand());
                additionalCommands.setDefaultCommandForRow(additionalCommands.get(0));

                OutOfStockProductsList outOfStockList = new OutOfStockProductsList(WareNeedItemsEditor.this.getClass().getCanonicalName());
                ReportCommandsDecorator decoratedItemsList = new ReportCommandsDecorator(outOfStockList, additionalCommands);
                TableReport tableReport = new TableReport(decoratedItemsList, WareNeedItemsEditor.this);
                return tableReport.getContentPanel();
            }
        });

        //Price list view.
        viewItems.add(new SwitchableViewItem() {
            @Override
            public String getName() {
                return I18nSupport.message("detail.batches.list.title");
            }

            @Override
            public Component getCreateViewComponent() {
                //Decorates detail batches list with new commands for adding ware need items to list.
                DetailBatchesList detailBatchesList = new DetailBatchesList("DetailBatchesList.in.WareNeedItemsEditor");
                ReportCommandsDecorator decoratedBatchesList = new ReportCommandsDecorator(detailBatchesList, createDetailBatchesDecoratedCommands());
                TableReport detailBatchesReport = new TableReport(decoratedBatchesList, WareNeedItemsEditor.this);
                return detailBatchesReport.getContentPanel();
            }
        });

        //Details catalog view.
        viewItems.add(new SwitchableViewItem() {
            @Override
            public String getName() {
                return I18nSupport.message("detail.catalog.list.properties.title");
            }

            @Override
            public Component getCreateViewComponent() {
                DetailCatalog detailsCatalog = new DetailCatalog(WareNeedItemsEditor.this, new DetailCatalogBatchesListFactory() {
                    private DetailBatchesList detailBatchesList;
                    private ReportDataSource decoratedBatchesList;

                    @Override
                    public ReportDataSource createDetailBatchesDataSource(DetailGroupTO catalogGroup) {
                        if (detailBatchesList == null) {
                            //Create new list only on first request.
                            detailBatchesList = new DetailBatchesList(catalogGroup, "DetailBatchesCatalog.in.WareNeedItemsEditor");
                            decoratedBatchesList = new ReportCommandsDecorator(detailBatchesList, createDetailBatchesDecoratedCommands());
                        } else {
                            //Reuse created data source (just change filter to load appropriate list of details).
                            detailBatchesList.setCatalogGroup(catalogGroup);
                        }
                        return decoratedBatchesList;
                    }
                }, true);
                return detailsCatalog.getContentPanel();
            }
        });

        detailBatchesView = new SwitchableView(viewItems, loadDetailBatchViewIndex());
        detailBatchesPanel.add(detailBatchesView.getContentPanel(), GridLayoutUtils.getGrowingAndFillingCellConstraints());
    }

    private ReportCommandList createDetailBatchesDecoratedCommands() {
        ReportCommandList additionalCommands = new ReportCommandListImpl();
        //additionalCommands.add(new QuickAddToWareNeedCommand());
        additionalCommands.add(new AddItemToWareNeedCommand());
        additionalCommands.setDefaultCommandForRow(additionalCommands.get(0));
        return additionalCommands;
    }

    private int loadDetailBatchViewIndex() {
        //Restores previously stored detail bathes view index (to use the same view on each new posting edition).
        Integer storedViewIndex = Properties.getPropertyAsInteger(PROPERTY_DETAIL_BATCHES_VIEW_INDEX);
        return storedViewIndex == null ? -1 : storedViewIndex;
    }

    private void initWareNeedItemsList() {
        WareNeedItemsList needItemsList = new WareNeedItemsList(wareNeed.getId(), this.getClass().getCanonicalName());
        needItemsPanel.add(new TableReport(needItemsList, this).getContentPanel(), GridLayoutUtils.getGrowingAndFillingCellConstraints());
    }
}
